#+TITLE: パッケージングを支える技術
#+AUTHOR: Atsushi Odagiri
#+SUBTITLE: PyCon JP 2016
#+LATEX_CLASS: bxjsslide
#+OPTIONS: toc:nil H:4 ^:nil
#+LATEX_HEADER: \let\stdsection\section
#+LATEX_HEADER:\renewcommand\section{\clearpage\stdsection}
#+LATEX_HEADER: \let\stdsubsection\subsection
#+LATEX_HEADER:\renewcommand\subsection{\clearpage\stdsubsection}

* お前だれよ

  - 小田切篤
  - ,(´_・ω・)_
  - BeProud
  - Pylons/Pyramid

* これまでのお話

  - 2013 パッケージングの今と未来
  - 2014 パッケージングの今
  - 2015 Packaging最前線

* アジェンダ

  - パッケージングを支えるPEP
  - パッケージングを支えるツール
  - ソースパッケージ
  - バイナリパッケージ
  - パッケージングを支える技術に支えられてみよう

* パッケージングを支えるPEP

  - https://packaging.python.org/specifications/
  - setuptools/easy_install/egg はPEPと関係なく作られていた

** PEP 345 -- Metadata for Python Software Packages 1.2


** PEP 376 -- Database of Installed Python Distributions

   - パッケージによってインストールされたファイルの情報
   - どのモジュールがどのパッケージでインストールされたか
   - インストール時のファイルのハッシュ

** TODO PEP 425 -- Compatibility Tags for Built Distributions

** PEP 426 -- Metadata for Python Software Packages 2.0
   - パッケージのメタデータ
   - ソースコード以外の情報
   - 作者やライセンスなどの情報
   - 依存ライブラリなどの構成
   - エントリポイントなどのプラガブルな仕組み
   - スクリプトの指定
*** TODO メタデータ2.0に関連するPEP

   - PEP 425 , defining a compatibility tagging mechanism for binary files
   - PEP 427 , defining the pre-built "wheel" format
   - PEP 440 , covering the versioning identification and selection scheme
   - PEP 503 , /simple/ package repository API
   - PEP 508 , covering dependency declarations and environment markers
   - PEP 513 , defining the "manylinux1" compatibility tag
   - PEP 518 , defining a static config file for sdist build system dependencies

** TODO PEP 427 -- The Wheel Binary Package Format 1.0

** TODO PEP 496 -- Environment Markers

** TODO PEP 440 -- Version Identification and Dependency Specification

** TODO PEP 491 -- The Wheel Binary Package Format 1.9

** TODO PEP 503 -- Simple Repository API

** TODO PEP 508 -- Dependency specification for Python Software Packages

** TODO PEP 513 -- A Platform Tag for Portable Linux Built Distributions

** TODO PEP 516 -- Build system abstraction for pip/conda etc

** TODO PEP 518 -- Specifying Minimum Build System Requirements for Python Projects

* パッケージングを支えるツール
** PyPA

- Python Packaging Authority
- パッケージングツールをメンテするグループ

** TODO setuptools
** TODO virtualenv
** TODO pip
** TODO wheel

   - wheel形式パッケージを作成するツール
   - setuptools に bdist_wheel サブコマンドを追加する
** TODO auditwheel

   - manylinux1 wheel を作成するツール
** TODO distlib

   - PEPを実装しているライブラリ
   - pipに同梱されている
   - [[http://distlib.readthedocs.io/en/latest/][distlib documentation]]
   - [[https://pypi.python.org/pypi/distlib][pypa distlib]]

** TODO packaging
   - PEPを実装しているライブラリ
   - distlibとの違いはなんなのか？

* TODO python標準の仕組み

** TODO PYTHONPATH

** TODO .pth

** TODO site-packages/user-site-packages

** TODO distutils

* TODO sdistとはなにか？

  - setuptoolsとpipの実装でなんとなく決まっている
  - `setup.py install` ができればsdist?

* TODO manylinux1

* TODO プログラミングPythonパッケージ

   - distlibはPEPで決まったことを実装しているライブラリ
   - distlibを使えばパッケージを操作できる（PEPで決まってる範囲で）

     #+BEGIN_SRC python

>>> import sys
>>> import os
>>> sys.path.append(os.path.join(os.getcwd(), 'distlib-0.2.3-py3-none-any.whl'))
>>> import distlib
>>> distlib

     #+END_SRC
* TODO distlibでできること

  - wheelパッケージ作成
  - wheelパッケージインストール
  - メタデータ作成
  - パッケージリポジトリからのダウンロード
  - インストール済パッケージのリストアップ

* 配布物の作成

  - 現状でPEPで決まってる配布物のフォーマットはwheelのみ
  - sdistはまだ議論中

** TODO 配布物作成に必要な情報
** TODO パッケージメタデータ

    - dist-info ディレクトリ
    - pydist.json/package.json

** TODO wheelパッケージを作成する

    - distlib.wheel

* パッケージの配布

** TODO simple package repository

   - pypiもこの形式
   - 登録やアップロード方法は決められてない
   - `httplib.server` などでも実現可能

** TODO wheelファイルをsimple package repository形式に配置する

   - distlib.wheelでメタデータを取得
   - パッケージ名でディレクトリを作成
   - wheelファイルをコピー


* TODO インストール

** TODO パッケージをリポジトリからダウンロードする

   - distlib.locators

** TODO wheelパッケージをインストールする

    - distlib.wheel

** TODO インストール一覧

     - distlib.database


     #+BEGIN_SRC python
>>> import distlib.database
>>> dist_path = distlib.database.DistributionPath()
>>> for dist in dist_path.get_distributions():
...     print(dist)
...
pip 8.1.2
distlib 0.2.3
wheel 0.29.0
setuptools 25.1.6

     #+END_SRC

** TODO ライブラリ依存ツリー

     #+BEGIN_SRC python

>>> graph = distlib.database.make_graph(list(dist_path.get_distributions()))
>>> graph
translationstring 1.3
PasteDeploy 1.5.2
setuptools 25.1.6
wheel 0.29.0
WebOb 1.6.1
zope.interface 4.2.0
    setuptools 25.1.6 [setuptools]
pyramid 1.7
    zope.deprecation 4.1.2 [zope.deprecation (>=3.5.0)]
        setuptools 25.1.6 [setuptools]
    translationstring 1.3 [translationstring (>=0.4)]
    WebOb 1.6.1 [WebOb (>=1.3.1)]
    repoze.lru 0.6 [repoze.lru (>=0.4)]
    zope.interface 4.2.0 [zope.interface (>=3.8.0)]
        setuptools 25.1.6 [setuptools]
    PasteDeploy 1.5.2 [PasteDeploy (>=1.5.0)]
    setuptools 25.1.6 [setuptools]
    venusian 1.0 [venusian (>=1.0a3)]
repoze.lru 0.6
zope.deprecation 4.1.2
    setuptools 25.1.6 [setuptools]
venusian 1.0
pip 8.1.2
distlib 0.2.3
     #+END_SRC
* TODO 実行
** TODO sys.path
