#+TITLE: パッケージングを支える技術
#+AUTHOR: Atsushi Odagiri
#+SUBTITLE: PyCon JP 2016
#+LATEX_CLASS: bxjsslide
#+OPTIONS: toc:nil H:4 ^:nil
#+LATEX_HEADER: \let\stdsection\section
#+LATEX_HEADER:\renewcommand\section{\clearpage\stdsection}
#+LATEX_HEADER: \let\stdsubsection\subsection
#+LATEX_HEADER:\renewcommand\subsection{\clearpage\stdsubsection}

* お前だれよ

  - 小田切篤

    #+ATTR_LATEX: :width 0.2\textwidth
    [[./logo_beproud.png]]
    #+ATTR_LATEX: :width 0.2\textwidth
    [[./pylons-positive.png]]
    #+ATTR_LATEX: :width 0.2\textwidth
    [[./pyramid-positive.png]]
    #+ATTR_LATEX: :width 0.2\textwidth
    [[./2954520.png]]

* これまでのお話

  - 2013 パッケージングの今と未来
  - 2014 パッケージングの今
  - 2015 Packaging最前線

* アジェンダ

  - パッケージングを支えるツール
  - ソースパッケージ
  - バイナリパッケージ
  - パッケージングを支える技術に支えられてみよう

* パッケージングを支えるツール
** PyPA

- Python Packaging Authority
- パッケージングツールをメンテするグループ
- github.com/pypa
- bitbucket.org/pypa

** setuptools

   - 配布物を作成する
   - setup.pyで使われる
   - easy_install使うのはもうやめましょう
   - distributeも、いい加減忘れてください

** 今日のsetuptools
   - 27.2.0
   - 去年(2016/9/6)18.3

** virtualenv

   - python環境を仮想化する
   - プロジェクトごとに使うライブラリを隔離
   - python3.3以降では同等の機能がpython本体から提供されている(pyvenv)

** pip

   - インストーラ
   - sdistとwheelを取り扱える
   - requirements.txt でライブラリを構成管理する

** wheel

   - wheel形式パッケージを作成するツール
   - setuptools に bdist_wheel サブコマンドを追加する

** TODO auditwheel

   - Linux向けのwheelを

** ツールの導入方法

   - python3.4以降ではpip,setuptoolsを導入するensurepipが入っているのでpythonインストール後にpipを利用可能
   - virtualenvは環境作成時にpip,setuptools,wheelを導入する
   - pyvenvはバージョンによって作成後のツール導入が異なる
     - 3.3 なし
     - 3.4以降 ensurepipでpip,setuptoolsが導入される
   - どの環境でもget-pip.py でpip,setuptools,wheelを最新にできる

** 例えばubuntuのpyvenv

   - 14.04 の python3.4 は ensurepipが消されているため、--without-pipをつけないとエラーになる
   - 16.04 の python3.5はensurepipがpkg_resources-0.0.0という謎のパッケージメタデータを作成する
     - そのままpip freezeしたrequirements.txtを作ると他の環境でエラーになる
   - 回避策は --without-pip で環境を作ってからget-pip.py でツールを導入する

* TODO python標準の仕組み

  - pypaツールはどのようにパッケージをインストールしてpythonインタプリタに認識させるのか？

** TODO PYTHONPATH

   - 環境変数
   - ここで複数のディレクトリを指定できる
   - 指定した内容は `sys.path` に入る
   - モジュールやパッケージを `import` するときは `sys.path` のディレクトリを探しに行く


** TODO site-packages/user-site-packages

   - サードパーティ製ライブラリの標準インストール先
   - debianではさらに dist-packages という謎のディレクトリが存在する

** TODO .pth

   - site-packages などに配置されるファイル
   - 中にファイルパスを羅列しておくと、インタプリタ起動時にすべて `sys.path` に追加される
   - `./` 以外で始まる行があるとpythonコードとして実行されるという謎仕様
   - easy_install が活用していた

** TODO distutils

   - setup.py で使う setup 関数の大元
   - setuptoolsはdistutilsの拡張

* TODO wheel
** TODO PEP 427 -- The Wheel Binary Package Format 1.0

   - バイナリ形式の配布フォーマット
   - 既に利用されている

** TODO PEP 513 -- A Platform Tag for Portable Linux Built Distributions
  - linux向けのwheelを作るために決められた
** Linux向けwheelパッケージのつらいところ

   - どのようなライブラリがあると想定してよいか？
   - 依存するライブラリのABIが合わないなどのトラブル
   - 依存ライブラリ同梱のためのハックがsetup.pyに散らばる

** manylinux1が想定するLinux環境

   - Centos5.11

** auditwheel

   - manylinux1を満たしているかチェック
   - 依存ライブラリをwheelに同梱させる

** TODO PEP 491 -- The Wheel Binary Package Format 1.9

* TODO sdistとはなにか？

  - setuptoolsとpipの実装でなんとなく決まっている
  - `setup.py install` ができればsdist?
** setuptoolsがなくてもwheelパッケージは作成できる
   - wheelツールはsetuptoolsと独立して作られている
   - distlibにもwheelを作成する処理が実装されている
** sdistを考え直す意味
   - setuptools依存からの脱却
   - 明確なインストールフロー

** 現状

   - pipがsdistをダウンロードする
   - pipがsdistを展開する
   - pipがsetup.py bdist_wheelを実行する
   - できあがったwheelパッケージをpipがインストールする
   - setup.py install は関係なかった

** TODO PEP 518 -- Specifying Minimum Build System Requirements for Python Projects
   - パッケージング方法やそれに必要なツールを支持する
   - pypi上でwheel作成する目的？
   - パッケージングに必要なツールを記述
   - pyproject.toml
   - TOMLフォーマット

** TODO PEP 516 -- Build system abstraction for pip/conda etc

   - ツールの指定方法

* TODO プログラミングPythonパッケージ

   - distlibはPEPで決まったことを実装しているライブラリ
   - distlibを使えばパッケージを操作できる（PEPで決まってる範囲で）
   - setuptoolsに依存せずにパッケージングしてみよう

** distlibでできること

   - wheelパッケージ作成
   - wheelパッケージインストール
   - メタデータ作成
   - パッケージリポジトリからのダウンロード
   - インストール済パッケージのリストアップ
** distlibを使う準備
         #+BEGIN_SRC python

    >>> import sys
    >>> import os
    >>> sys.path.append(
    ...     os.path.join(
    ...         os.getcwd(),
    ...         'distlib-0.2.3-py3-none-any.whl'))
    >>> import distlib
    >>> distlib

         #+END_SRC

* 配布物の作成

  - 現状でPEPで決まってる配布物のフォーマットはwheelのみ
  - sdistはまだ議論中

** TODO 配布物作成に必要な情報
** TODO パッケージメタデータ

    - dist-info ディレクトリ
    - pydist.json/package.json

** TODO wheelパッケージを作成する

    - distlib.wheel

* パッケージの配布
  - 作成したパッケージを公開してインストール可能にする
  - simple package repository形式のサイトで公開する
  - ダウンロードしてインストールする

** TODO PEP 503 -- Simple Repository API

   - pypiもこの形式
   - 登録やアップロード方法は決められてない
   - `httplib.server` などでも実現可能

** TODO wheelファイルをsimple package repository形式に配置する

   - distlib.wheelでメタデータを取得
   - パッケージ名でディレクトリを作成
   - wheelファイルをコピー


* TODO インストール

** TODO パッケージをリポジトリからダウンロードする

   - distlib.locators

** TODO wheelパッケージをインストールする

    - distlib.wheel

** TODO インストール一覧
** PEP 376 -- Database of Installed Python Distributions

   - パッケージによってインストールされたファイルの情報
   - どのモジュールがどのパッケージでインストールされたか
   - インストール時のファイルのハッシュ


     - distlib.database


     #+BEGIN_SRC python
>>> import distlib.database
>>> dist_path = distlib.database.DistributionPath()
>>> for dist in dist_path.get_distributions():
...     print(dist)
...
pip 8.1.2
distlib 0.2.3
wheel 0.29.0
setuptools 25.1.6

     #+END_SRC

** TODO ライブラリ依存ツリー

     #+BEGIN_SRC python

>>> graph = distlib.database.make_graph(list(dist_path.get_distributions()))
>>> graph
translationstring 1.3
PasteDeploy 1.5.2
setuptools 25.1.6
wheel 0.29.0
WebOb 1.6.1
zope.interface 4.2.0
    setuptools 25.1.6 [setuptools]
pyramid 1.7
    zope.deprecation 4.1.2 [zope.deprecation (>=3.5.0)]
        setuptools 25.1.6 [setuptools]
    translationstring 1.3 [translationstring (>=0.4)]
    WebOb 1.6.1 [WebOb (>=1.3.1)]
    repoze.lru 0.6 [repoze.lru (>=0.4)]
    zope.interface 4.2.0 [zope.interface (>=3.8.0)]
        setuptools 25.1.6 [setuptools]
    PasteDeploy 1.5.2 [PasteDeploy (>=1.5.0)]
    setuptools 25.1.6 [setuptools]
    venusian 1.0 [venusian (>=1.0a3)]
repoze.lru 0.6
zope.deprecation 4.1.2
    setuptools 25.1.6 [setuptools]
venusian 1.0
pip 8.1.2
distlib 0.2.3
     #+END_SRC
* TODO 実行
** TODO sys.path
